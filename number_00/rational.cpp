#include "rational.h"
#include <string>
#include <iostream>
#include "euclid_algorithm.h"

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

Rational::Rational(int n, int d) {
		numerator = n;
		denominator = d;
		this->reduce();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Rational::Rational(const Rational& q) {
		numerator = q.numerator;
		denominator = q.denominator;
		this->reduce();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int Rational::add(const Rational& x) {
		numerator = numerator * x.denominator + x.numerator * denominator;
		denominator = denominator * x.denominator;
		this->reduce();
		return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int Rational::diff(const Rational& x) {
		numerator = numerator * x.denominator - x.numerator * denominator;
		denominator = denominator * x.denominator;
		this->reduce();
		return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int Rational::mult(const Rational& x) {
		numerator = numerator * x.numerator;
		denominator = denominator * x.denominator;
		this->reduce();
		return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int Rational::div(const Rational& x) {
		numerator = numerator * x.denominator;
		denominator = denominator * x.numerator;
		this->reduce();
		return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

std::string Rational::to_string() {
		const char* slash = "/";
		std::string s = std::to_string(numerator) 
				+ slash + std::to_string(denominator);
		return s;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

void Rational::reduce() {
		if (denominator < 0) {
				denominator = -denominator;
				numerator = -numerator;
		}
		int d = euclid(numerator, denominator);

		numerator = numerator/d;
		denominator = denominator/d;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Rational Rational::operator+(const Rational& x) {
		Rational q(x);
		q.add(*this);
		return q;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Rational Rational::operator-(const Rational& x) {
		Rational q(x);
		q.diff(*this);
		return q;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Rational Rational::operator*(const Rational& x) {
		Rational q(x);
		q.mult(*this);
		return q;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Rational Rational::operator/(const Rational& x) {
		Rational q(x);
		q.div(*this);
		return q;
}

///////////////////////////////////////////////////////////////////////////////
